일단 ASP는 .NET만 생각하도록 합니다. 그냥 ASP는 사라져가는 추세고요 절대 쓰기 편하지도 않습니다.

1. PHP
가장 일반적이고 무난한 선택입니다. 중소규모 에서는요. 윈도우서버 리눅스서버 가리지 않고 실행 되고 속도도 어느 정도 보장 됩니다.
윗분이 프레임 워크 얘기를 하셨는데 그건 일반적인 작은 사이트 얘기고 큰 사이트에서는 따로 프로세스가 돌아가고 접속을 관리해 주는 
.NET이나 JSP쪽 프레임워크가 더 좋습니다. 페이지당 인스턴스가 생기기 때문에 객체를 여러 페이지에서 공유하거나 하기는 힘들죠. 
즉 OOP를 완전히 하긴 어렵습니다.

2. ASP.NET
가장 장점은 비주얼 스투디오라는 툴이고 단점은 윈도우서버만 된다는 것 이겠죠. 
.NET쪽 개발 해 보신 분이면 아시겠지만 무척 편리하고 쾌적하게 개발 할 수 있습니다. 기본적으로 프레임워크 자체가 무거운게 단점이겠네요.

3. JSP
일반적으로 JSP는 중규모 이상되는 사이트에서 운영합니다. 사실 JSP라고 해서 JSP만 쓰지는 않고 Spring같은 프레임워크를 사용하겠죠.
리눅스 서버를 이용 할 수 있다는 것 빼고는 .NET과 별로 다를건 없습니다.

.NET이나 JSP는 거의 프레임워크 기반입니다. 완벽한 OO가 지원 되고요 좀 무거운 단점이 있죠.
혹시라도 MAC을 사용한다면 WebObjects라는 것도 괜찮습니다. JAVA기반의 Apple에서 만든 프레임워크 입니다.

 돈이 없는곳은 
PHP+Apache+MySQL 을 쓰게되고...
기업은 JSP+WAS(WebLogic, Jeus, WebSphere 등)+Oracle 등을 요구하게되니...
ASP가 시장에서 밀리게 되지요. 결론은 확장성에서 ASP가 많이 떨어집니다.
ASP .NET이라는 승부수를 띄어서 뭐 앞으로 쭉 지켜봐야겠네요... 아직도 ASP 서버는 많이 돌아가고 있으니까요...

결국은 고객의 요구와 프로젝트의 목적 팀의 능력, 마지막으로 개발후에 운영할 사용자의 능력에 따라 선택하는것이 맞는거 같네요...

매쉬업형태나 OpenAPI 형태로 제공되는 서비스들을 보면... JSP, ASP, PHP 로 제공되는 서비스들이 있고.. 
얘들을 서비스를 통합하기 위해서 REST 방식과 SOAP 방식이 있고(대세는 REST)
다시 데이터를 주고 받기위해 XML, JSON 등을 사용하는 형태의 서비스가 점점 늘어나고 있습니다...

너무 시각을 좁게만 가져가지 마세요...

일단 웹하면
HTML
CSS
DOM+JavaScript(Ajax, jQuery, Prototype, YUI 기타등등등)
JSP+Struts,Spring,Tiles ....
PHP+ZendFramework, CodeIgnitor, PHPCake 등등등
ASP+ ASP.NET
Ruby+ Rails...
WAS
DB(MySQL, Oracle, MS-SQL, CUBRID)
OS(Windows, Linux)
대용량 처리위한(Hadoop, HBase 등등등)

해야될껀 무자게 많아요...
쟤가 가장 중요하게 보는건 얘들이 뭘하는 애들인지 지금 당장은 몰라도 프로젝트에 필요하면 하루든 일주일이든 빠르게 학습해서 적용할수 있는 능력과...
개발자로서 문제해결능력이 중요하다고 생각합니다...
너무 생각을 좁게 딱 한곳에만 가져가지 마세요...

아 네트워크랑 보안도 봐야하는구나...ㅡㅡ;; 서버 구성도 봐야되고....

이상 웹개발 시작한지 1년 쪼금 넘은 개발자의 답변이였습니다...

스마트폰쪽도 봐야하는데...ㅠㅠ



node.js
maven
apache
